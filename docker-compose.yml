version: "3.7"

services:
  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transactions_db
    networks:
      - prisma-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7.0
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - kafka-network
    command: redis-server --appendonly yes

  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: app_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - kafka-network
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "Local Kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    networks:
      - kafka-network

  transaction-service:
    build: ./transaction-service
    container_name: transaction-service
    ports:
      - "3000:3000"
    env_file:
      - ./transaction-service/.env
    environment:
      DATABASE_HOST: postgres_db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: transactions_db
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "Local Kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    depends_on:
      - postgres
      - kafka
      - redis
    networks:
      - kafka-network
      - prisma-network
    command: sh -c "npm start && echo 'Swagger disponible en http://localhost:3000/api/docs'"

  antifraud-service:
    build: ./antifraud-service
    container_name: antifraud-service
    env_file:
      - ./antifraud-service/.env
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "Local Kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - kafka-network
    command: sh -c "npm start"

networks:
  prisma-network:
    name: prisma-network
  kafka-network:
    name: kafka-network

volumes:
  postgres_data:
